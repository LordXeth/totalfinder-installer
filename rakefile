require 'rake'

ROOT_DIR = File.expand_path('.')
TMP_DIR = File.join(ROOT_DIR, 'tmp')
TMP_DIR_BIN = File.join(TMP_DIR, 'bin')
TMP_DIR_BUILD = File.join(TMP_DIR, 'build')

PARENT_DIR = File.expand_path('..')
RELEASE_DIR = File.join(PARENT_DIR, 'release')

OSAX_DIR     = File.join(PARENT_DIR, 'totalfinder-osax')
KEXT_DIR     = File.join(PARENT_DIR, 'totalfinder-kext')
BREAKPAD_DIR = File.join(PARENT_DIR, 'totalfinder-breakpad')
I18N_DIR     = File.join(PARENT_DIR, 'totalfinder-i18n')
I18N_DIR_INSTALLER = File.join(I18N_DIR, 'installer')

################################################################################################
# dependencies

begin
    require 'colored'
rescue LoadError
    raise 'You must "gem install colored" to use terminal colors'
end

################################################################################################
# helpers

def die(msg, status=1)
    puts "Error[#{status||$?}]: #{msg}".red
    exit status||$?
end

def sys(cmd)
    puts "> #{cmd}".yellow
    system(cmd)
end

################################################################################################
# routines

def version()
  $version = ENV["version"] or die("specify version")
end

def patch(path, replacers)
  puts "#{'Patching'.red} #{path.blue}"
  lines = []
  File.open(path, "r") do |f|
    f.each do |line|
      replacers.each do |r|
        line.gsub!(r[0], r[1])
      end
      lines << line
    end
  end
  File.open(path, "w") do |f|
    f << lines
  end
end

################################################################################################
# tasks

desc "builds installer+unistaller, point it to products=<path>"
task :build do
    puts "#{'Checking environment ...'.magenta}"
    version()
    sys("rm -rf \"#{TMP_DIR}\"")
    sys("mkdir -p #{TMP_DIR}") unless File.exists? TMP_DIR
    sys("mkdir -p #{TMP_DIR_BUILD}") unless File.exists? TMP_DIR_BUILD
    sys("mkdir -p #{RELEASE_DIR}") unless File.exists? RELEASE_DIR
    
    $products = ENV["products"]
    unless $products then
        puts "no products path specified, using dummy products".red
        sys("mkdir -p \"#{TMP_DIR_BIN}\"")
        Dir.chdir TMP_DIR_BIN do
            sys("mkdir -p TotalFinder.app/Contents/Resources")
        end
        $products = TMP_DIR_BIN
    else
        $products = File.expand_path($products)
        sys("mkdir -p #{TMP_DIR_BIN}")
        sys("cp -r \"#{$products}\"/* \"#{TMP_DIR_BIN}\"")
    end
    

    sys("cp \"#{ROOT_DIR}/installer.pkgproj\" \"#{ROOT_DIR}/installer-patched.pkgproj\"")
    patch("#{ROOT_DIR}/installer-patched.pkgproj", [
        ['##VERSION##', $version], 
        ['##INSTALLER_TITLE##', "TotalFinder #{$version}"],
        ['/Users/darwin/code/totalfinder/release', TMP_DIR_BUILD]
    ])

    sys("cp \"#{ROOT_DIR}/TotalFinder Uninstaller.platypus\" \"#{ROOT_DIR}/uninstaller-patched.platypus\"")
    patch("#{ROOT_DIR}/uninstaller-patched.platypus", [
        ["/Users/darwin/code/totalfinder/totalfinder-installer", ROOT_DIR]
    ])
  
    uninstaller = File.join(ROOT_DIR, "TotalFinder Uninstaller.app")
    uninstaller_profile = File.join(ROOT_DIR, "uninstaller-patched.platypus")
  
    sys("rm -rf \"#{uninstaller}\"") if File.exist? uninstaller
    die("build failed") unless $?==0
    
    sys("platypus -P \"#{uninstaller_profile}\" \"#{uninstaller}\"")
    die("build failed") unless $?==0
    
    sys("cp -r \"#{uninstaller}\" \"#{TMP_DIR_BIN}/TotalFinder.app/Contents/Resources\"")
    die("build failed") unless $?==0

    sys("lipo \"#{TMP_DIR_BIN}/TotalFinder.app/Contents/MacOS/applet\" -remove ppc7400 -output \"#{TMP_DIR_BIN}/TotalFinder.app/Contents/MacOS/applet\"")
   
    release = File.join(TMP_DIR_BUILD, "TotalFinder.mpkg") # THIS MUST BE THE SAME NAME AS OF THE APP! REQUIRED BY SPARKLE
    sys("rm -rf \"#{release}\"") if File.exist? release
    die("build failed") unless $?==0
  
    sys("packagesbuild -v -F \"#{ROOT_DIR}\" \"#{ROOT_DIR}/installer-patched.pkgproj\"")
    die("build failed") unless $?==0
   
    installer_icon = File.join(I18N_DIR_INSTALLER, "totalfinder.icns")
    sys("./wincent-icon-util -icon \"#{installer_icon}\" -folder \"#{release}\"")
    die("build failed") unless $?==0
   
    releasedmg = File.join(RELEASE_DIR, "TotalFinder-#{$version}.dmg")
    sys("rm -rf \"#{releasedmg}\"") if File.exist? releasedmg
    die("build failed") unless $?==0
   
    sys("wkpdf --source \"#{I18N_DIR_INSTALLER}/readme.html\" --output \"#{TMP_DIR}/Readme.pdf\"")
    readme = File.join(TMP_DIR, "Readme.pdf")
 
    sys("hdiutil create \"#{releasedmg}\" -volname \"TotalFinder\" -fs HFS+ -srcfolder \"#{release}\" -srcfolder \"#{uninstaller}\" -srcfolder \"#{readme}\"")
    die("build failed") unless $?==0
    
    Rake::Task["clean"].execute
end
  
desc "removes intermediate build files"
task :clean do
    puts "Cleaning intermediate build files...".magenta
    sys("rm -rf \"#{TMP_DIR}\"")
    sys("rm \"#{ROOT_DIR}/uninstaller-patched.platypus\"") if File.exists?("#{ROOT_DIR}/uninstaller-patched.platypus")
    sys("rm \"#{ROOT_DIR}/installer-patched.pkgproj\"")  if File.exists?("#{ROOT_DIR}/installer-patched.pkgproj")
    sys("rm -rf \"#{ROOT_DIR}/TotalFinder Uninstaller.app\"")
end

task :default => :build