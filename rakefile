require 'rake'

ROOT_DIR = File.expand_path('.')
TMP_DIR = File.join(ROOT_DIR, 'tmp')
TMP_DIR_BUILD = File.join(TMP_DIR, 'build')

PARENT_DIR = File.expand_path('..')
RELEASE_DIR = File.join(PARENT_DIR, 'release')
BUILD_DIR = File.join(PARENT_DIR, 'build')
BUILD_TOTALFINDER_BUNDLE = File.join(BUILD_DIR, 'TotalFinder.osax/Contents/Resources/TotalFinder.bundle')
BUILD_TOTALFINDER_PLUGINS = File.join(BUILD_TOTALFINDER_BUNDLE, 'Contents/PlugIns')
BUILD_TOTALFINDER_FRAMEWORKS = File.join(BUILD_TOTALFINDER_BUNDLE, 'Contents/Frameworks')
BUILD_TOTALFINDER_RESOURCES = File.join(BUILD_TOTALFINDER_BUNDLE, 'Contents/Resources')

I18N_DIR = File.join(PARENT_DIR, 'shared', 'i18n')
I18N_DIR_INSTALLER = File.join(I18N_DIR, 'installer')

################################################################################################
# dependencies

begin
    require 'colored'
rescue LoadError
    raise 'You must "gem install colored" to use terminal colors'
end

################################################################################################
# helpers

def die(msg, status=1)
    puts "Error[#{status||$?}]: #{msg}".red
    exit status||$?
end

def sys(cmd)
    puts "> #{cmd}".yellow
    system(cmd)
end

################################################################################################
# routines

def version()
  $version = ENV["version"] or die("specify version")
end

def patch(path, replacers)
  puts "#{'Patching'.red} #{path.blue}"
  lines = []
  File.open(path, "r") do |f|
    f.each do |line|
      replacers.each do |r|
        line.gsub!(r[0], r[1])
      end
      lines << line
    end
  end
  File.open(path, "w") do |f|
    f << lines.join
  end
end

def codesign(path)
  sys("codesign --force --sign \"Developer ID Application: BinaryAge Limited\" \"#{path}\"")
end

def productsign(path)
  tmp_path = path+"-tmp"
  sys("mv \"#{path}\" \"#{tmp_path}\"")
  sys("productsign --sign \"Developer ID Installer: BinaryAge Limited\" \"#{tmp_path}\" \"#{path}\"")
  sys("rm \"#{tmp_path}\"")
end

################################################################################################
# tasks

desc "builds installer+unistaller, point it to products=<path>"
task :build do
    puts "#{'Checking environment ...'.magenta}"
    version()
    sys("rm -rf \"#{TMP_DIR}\"")
    sys("mkdir -p #{TMP_DIR}") unless File.exists? TMP_DIR
    sys("mkdir -p #{TMP_DIR_BUILD}") unless File.exists? TMP_DIR_BUILD
    sys("mkdir -p #{RELEASE_DIR}") unless File.exists? RELEASE_DIR
    
    $products = ENV["products"]
    unless $products then
        puts "no products path specified, using dummy products".red
        sys("mkdir -p \"#{BUILD_DIR}\"")
        Dir.chdir BUILD_DIR do
            sys("mkdir -p TotalFinder.app/Contents/Resources")
        end
        $products = BUILD_DIR
    end
    $products = File.expand_path($products)

    $release = File.expand_path(ENV["release"] || RELEASE_DIR)
    
    sys("cp \"#{ROOT_DIR}/installer.pkgproj\" \"#{ROOT_DIR}/installer-patched.pkgproj\"")
    patch("#{ROOT_DIR}/installer-patched.pkgproj", [
        ['##VERSION##', $version], 
        ['##INSTALLER_TITLE##', "TotalFinder #{$version}"],
        ['##ROOT_PATH##', PARENT_DIR],
        ['##BUILD_PATH##', $release]
    ])

    sys("cp \"#{ROOT_DIR}/TotalFinder Uninstaller.platypus\" \"#{ROOT_DIR}/uninstaller-patched.platypus\"")
    # patch("#{ROOT_DIR}/uninstaller-patched.platypus", [
    #     ["/Users/darwin/code/totalfinder", "#{ROOT_DIR}/.."]
    # ])
  
    uninstaller = File.join(ROOT_DIR, "TotalFinder Uninstaller.app")
    uninstaller_profile = File.join(ROOT_DIR, "uninstaller-patched.platypus")
  
    sys("rm -rf \"#{uninstaller}\"") if File.exist? uninstaller
    die("build failed") unless $?==0
    
    sys("./bin/platypus/platypus_clt -P \"#{uninstaller_profile}\" \"#{uninstaller}\"")
    die("build failed") unless $?==0

    codesign(uninstaller)
    
    sys("cp -r \"#{uninstaller}\" \"#{BUILD_DIR}/TotalFinder.osax/Contents/Resources/TotalFinder.bundle/Contents/Resources\"")
    die("build failed") unless $?==0

    # codesign stuff
    codesign(File.join(BUILD_TOTALFINDER_FRAMEWORKS, "Sparkle.framework/Versions/A/Resources/finish_installation.app"))
    codesign(File.join(BUILD_TOTALFINDER_FRAMEWORKS, "Sparkle.framework/Versions/A"))
    codesign(File.join(BUILD_TOTALFINDER_FRAMEWORKS, "TotalKit.framework/Versions/A"))
    Dir.glob(File.join(BUILD_TOTALFINDER_PLUGINS, "*")) do |plugin|
        codesign(plugin)
    end
    codesign(File.join(BUILD_TOTALFINDER_RESOURCES, "TotalFinderCrashWatcher.app"))
    codesign(File.join(BUILD_TOTALFINDER_BUNDLE))
    codesign(File.join(BUILD_DIR, "TotalFinder.osax"))

    patch("#{BUILD_DIR}/TotalFinder.app/Contents/Info.plist", [
        ['##VERSION##', $version]
    ])
    
    # compilation of main.applescript -> main.scpt is done during build, here just check its presence
    Dir.chdir("#{BUILD_DIR}/TotalFinder.app/Contents/Resources/Scripts") do
        die("no main.scpt present!") unless File.exists? "main.scpt"
    end
   
    release = File.join($release, "TotalFinder.pkg") # THIS MUST BE THE SAME NAME AS OF THE APP! REQUIRED BY SPARKLE
    sys("rm -rf \"#{release}\"") if File.exist? release
    die("build failed") unless $?==0
    
    codesign("#{BUILD_DIR}/TotalFinder.app")
    
    sys("./bin/packagesbuild -v -F \"#{ROOT_DIR}\" \"#{ROOT_DIR}/installer-patched.pkgproj\"")
    die("build failed") unless $?==0
   
    # codesign the pkg
    productsign(release)

    installer_icon = File.join(I18N_DIR_INSTALLER, "totalfinder-installer.icns")
    sys("./bin/setfileicon \"#{installer_icon}\" \"#{release}\"")
    die("build failed") unless $?==0
   
    releasedmg = File.join($release, "TotalFinder-#{$version}.dmg")
    sys("rm -rf \"#{releasedmg}\"") if File.exist? releasedmg
    die("build failed") unless $?==0
   
    readme_source = File.join(I18N_DIR_INSTALLER, "readme.pdf")
    readme = File.join(TMP_DIR, "Readme.pdf")
    sys("mv \"#{readme_source}\" \"#{readme}\"")
 
    sys("hdiutil create \"#{releasedmg}\" -volname \"TotalFinder\" -format UDBZ -fs HFS+ -srcfolder \"#{release}\" -srcfolder \"#{uninstaller}\" -srcfolder \"#{readme}\"")
    die("build failed") unless $?==0
    
    Rake::Task["clean"].execute
end
  
desc "removes intermediate build files"
task :clean do
    puts "Cleaning intermediate build files...".magenta
    sys("rm -rf \"#{TMP_DIR}\"")
    sys("rm -rf \"#{BUILD_DIR}\"")
    sys("rm \"#{ROOT_DIR}/uninstaller-patched.platypus\"") if File.exists?("#{ROOT_DIR}/uninstaller-patched.platypus")
    sys("rm \"#{ROOT_DIR}/installer-patched.pkgproj\"")  if File.exists?("#{ROOT_DIR}/installer-patched.pkgproj")
    sys("rm -rf \"#{ROOT_DIR}/TotalFinder Uninstaller.app\"")
    sys("rm -rf \"#{File.expand_path(ENV["release"] || RELEASE_DIR)}/TotalFinder.mpkg\"")
end

task :default => :build